{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\GPL3\\\\point-game\\\\src\\\\Page.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page = ({\n  setZoomSlider,\n  zoomSlider,\n  playersScore,\n  setPlayersScore,\n  height,\n  setHeight,\n  width,\n  setWidth,\n  scale,\n  setScale,\n  totalPlayers,\n  numRows,\n  numCols,\n  plateau,\n  setPlateau,\n  timeElapsed,\n  currentPlayer,\n  setCurrentPlayer,\n  joueurs\n}) => {\n  _s();\n  React.useEffect(() => {\n    if (timeElapsed <= 0) {\n      setCurrentPlayer(currentPlayer % totalPlayers + 1);\n      // localStorage.setItem(\"currentPlayer\", currentPlayer % totalPlayers + 1);\n      //console.log('turn', currentPlayer % totalPlayers + 1);\n    }\n  }, [timeElapsed, currentPlayer, totalPlayers]);\n  const [marginTop, setMarginTop] = useState(scale * 3);\n  const [marginBottom, setMarginBottom] = useState(scale * 2);\n  const [marginLeft, setMarginLeft] = useState(scale * 4);\n  const [marginRight, setMarginRight] = useState(scale * 4 / 5);\n  const [radius, setRadius] = useState(scale / 7);\n\n  //let s = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n  //setWidth(marginLeft + numCols * scale + marginRight);\n  let [echelle, setEchelle] = useState(1.1); // Nouvelle variable echelle � 1 par d�faut\n  const [scrolling, setScrolling] = useState(false); // �tat pour suivre si le d�filement est actif\n\n  // Gestionnaire d'�v�nements pour la molette\n  const handleWheel = event => {\n    event.evt.preventDefault(); // Utiliser l'�v�nement natif pour pr�venir le comportement par d�faut\n    const molette = event.evt.deltaY;\n    console.log(\"molette\", molette, \" \", molette < 0);\n    echelle = molette < 0 ? 1.1 : 1 / 1.1;\n    setEchelle(echelle);\n    console.log(\"cell\", scale, \"radius\", radius, \"echelle\", echelle, \"newE\", echelle);\n    if ((scale > 20 || molette < 0) && (scale < 120 || molette > 0)) {\n      scale = Math.round(scale * echelle);\n      setScale(scale);\n      // Ajuster les marges en fonction de l'�chelle\n      setMarginTop(prevMarginTop => Math.round(prevMarginTop * echelle));\n      setMarginBottom(prevMarginBottom => Math.round(prevMarginBottom * echelle));\n      setMarginLeft(prevMarginLeft => Math.round(prevMarginLeft * echelle));\n      setMarginRight(prevMarginRight => Math.round(prevMarginRight * echelle));\n      setRadius(prevRadius => prevRadius * echelle);\n      setWidth(numCols * scale);\n      setHeight(numRows * scale);\n      zoomSlider.value = scale;\n      setZoomSlider(zoomSlider);\n    }\n    // Indiquer que le d�filement est actif\n    setScrolling(true);\n    console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n    console.log(\"width\", width, \" height\", height);\n  };\n  useEffect(() => {\n    if (zoomSlider) {\n      const handleZoomSliderChange = () => {\n        const echelle = parseInt(zoomSlider.value) / scale;\n        scale = Math.round(scale * echelle);\n        setScale(scale);\n        setMarginTop(prevMarginTop => Math.round(prevMarginTop * echelle));\n        setMarginBottom(prevMarginBottom => Math.round(prevMarginBottom * echelle));\n        setMarginLeft(prevMarginLeft => Math.round(prevMarginLeft * echelle));\n        setMarginRight(prevMarginRight => Math.round(prevMarginRight * echelle));\n        setRadius(prevRadius => prevRadius * echelle);\n        setWidth(numCols * scale);\n        setHeight(numRows * scale);\n        console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n        console.log(\"width\", width, \" height\", height);\n      };\n      zoomSlider.addEventListener('input', handleZoomSliderChange);\n      return () => zoomSlider.removeEventListener('input', handleZoomSliderChange);\n    }\n  }, [zoomSlider, echelle, numCols, numRows]);\n\n  // Tableaux pour stocker les points de chaque joueur avec leur couleur\n  const [playerPoints, setPlayerPoints] = useState(Array.from({\n    length: totalPlayers\n  }, () => []));\n\n  // Initialisation des circuits pour chaque joueur\n  const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n  const drawClosedCircuit = () => {\n    let lines = [];\n    for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n      let circuits = playersCircuitsList[playerIndex];\n      let color = joueurs[playerIndex].color;\n      for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n        const circuit = circuits[circuitIndex];\n        const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n        lines.push( /*#__PURE__*/_jsxDEV(Line, {\n          points: points,\n          stroke: color,\n          strokeWidth: radius * 2 / 5,\n          closed: true // Fermer le circuit\n          ,\n          lineJoin: \"round\",\n          lineCap: \"round\"\n        }, `player-${playerIndex}-circuit-${circuitIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    return lines;\n  };\n  const renderPlayerAreas = () => {\n    const areas = [];\n\n    // Définir les propriétés des zones selon les joueurs\n    const player4Areas = [{\n      player: 1,\n      x: marginLeft,\n      y: marginTop,\n      width: 7 * width / 22,\n      height: height,\n      color: joueurs[0].color\n    }, {\n      player: 2,\n      x: marginLeft + width - 7 * width / 22,\n      y: marginTop,\n      width: 7 * width / 22,\n      height: height,\n      color: joueurs[1].color\n    }, {\n      player: 3,\n      x: marginLeft,\n      y: marginTop,\n      width: width,\n      height: 7 * height / 22,\n      color: joueurs[2].color\n    }, {\n      player: 4,\n      x: marginLeft,\n      y: marginTop + height - 7 * height / 22,\n      width: width,\n      height: 7 * height / 22,\n      color: joueurs[3].color\n    }];\n    const player3Areas = [];\n\n    // Boucle pour ajouter les zones selon le joueur courant\n\n    playerAreas.forEach(({\n      player,\n      x,\n      y,\n      width,\n      height,\n      color\n    }) => {\n      if (currentPlayer === player) {\n        areas.push( /*#__PURE__*/_jsxDEV(Rect, {\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          fill: color // Couleur du joueur\n          ,\n          opacity: 0.2 // Opacité pour visualiser\n        }, `player${player}-restricted-area`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this));\n      }\n    });\n    return areas;\n  };\n\n  // Exemple d'utilisation dans la fonction principale\n  const Page = ({\n    // autres props\n    currentPlayer,\n    joueurs,\n    marginLeft,\n    marginTop,\n    width,\n    height\n  }) => {\n    return /*#__PURE__*/_jsxDEV(Stage, {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [renderPlayerAreas(), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this);\n  };\n  const renderHorizontalLines = () => {\n    const lines = [];\n\n    // Espacement entre les lignes principales\n    const spacing = scale;\n    const startY = marginTop;\n    const totalWidth = marginLeft + width + marginRight; // Largeur totale ajust�e\n\n    // Ajouter trois lignes interm�diaires au-dessus de la premi�re ligne principale\n    const initialIncrement = spacing / 4;\n    for (let k = 1; k <= 3; k++) {\n      const aboveFirstYPosition = startY - k * initialIncrement;\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, aboveFirstYPosition, totalWidth, aboveFirstYPosition],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n      }, `hline-above-first-${k}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this));\n    }\n    for (let i = 0; i <= numRows; i++) {\n      // Position de la ligne principale\n      const mainYPosition = startY + i * spacing;\n\n      // Ajouter la ligne principale\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 4 // Ajustement de l'�paisseur de la ligne\n      }, `hline-main-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this));\n\n      // Ajouter trois lignes interm�diaires entre la ligne actuelle et la suivante\n      if (i < numRows) {\n        const increment = spacing / 4; // Espacement des lignes interm�diaires\n\n        for (let j = 1; j <= 3; j++) {\n          const intermediateYPosition = mainYPosition + j * increment;\n          lines.push( /*#__PURE__*/_jsxDEV(Line, {\n            points: [0, intermediateYPosition, totalWidth, intermediateYPosition],\n            stroke: \"#4455C9DD\",\n            strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n          }, `hline-intermediate-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this));\n        }\n      }\n    }\n\n    // Ajouter deux lignes interm�diaires en dessous de la derni�re ligne principale\n    const belowLastYPosition = startY + numRows * spacing;\n    for (let m = 1; m <= 2; m++) {\n      const belowLastYIncrement = belowLastYPosition + m * initialIncrement;\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, belowLastYIncrement, totalWidth, belowLastYIncrement],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n      }, `hline-below-last-${m}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  const renderVerticalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numCols; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom],\n        stroke: i === 0 ? \"#FF0000CC\" : \"#4455C9DD\",\n        strokeWidth: radius / 4\n      }, `vline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n\n  // Calculer l'intersection la plus proche\n  const getClosestIntersection = (x, y) => {\n    const closestX = Math.round((x - marginLeft) / scale) * scale;\n    const closestY = Math.round((y - marginTop) / scale) * scale;\n    return {\n      x: closestX + marginLeft,\n      y: closestY + marginTop\n    };\n  };\n  const isValidPoint = (x, y) => {\n    return x > marginLeft - 20 && x < marginLeft + width + 20 && y > marginTop - 20 && y < marginTop + height + 20;\n  };\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  }); // �tat pour la position de la souris\n\n  // G�rer le mouvement de la souris \n  const handleMouseMove = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    setScrolling(false);\n    if (isValidPoint(x, y)) {\n      setMousePos({\n        x: closestX,\n        y: closestY\n      });\n    }\n  };\n\n  // ************************************************************************************************************* //\n  // *********** ATO NO MIASA LE GAME **************************************************************************** //\n  // ************************************************************************************************************* //\n  const handleClick = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const newX = Math.round((x - marginLeft) / scale) + 1; // Calcul de la colonne la plus proche\n    const newY = Math.round((y - marginTop) / scale) + 1; // Calcul de la ligne la plus proche\n\n    if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n      //reset temps de reflexion\n      localStorage.setItem('reset', 'true');\n\n      // setCurrentPlayer(currentPlayer % totalPlayers + 1);\n      handlePlayerMove(plateau, newX, newY, currentPlayer, 0);\n    }\n  };\n  const handlePlayerMove = async (plateau, newX, newY, currentPlayer, count) => {\n    // Ajouter le point au joueur courant\n    const updatedPlayerPoints = [...playerPoints];\n    updatedPlayerPoints[currentPlayer - 1].push({\n      x: newX - 1,\n      y: newY - 1\n    });\n    setPlayerPoints(updatedPlayerPoints);\n    plateau[newY][newX] = currentPlayer;\n\n    // Mettre  jour l'tat plateau avec la nouvelle matrice\n    setPlateau(plateau);\n    try {\n      // Appel de la fonction avec les donn�es � envoyer et attendre qu'elle se termine\n      let cP = await sendDataToServer(plateau, {\n        x: newX,\n        y: newY\n      });\n\n      // console.log(\"cp\", cP);\n      // if (cP.currentPlayer === 2 && count < 1) {\n      //     console.log(\"tonga eto\");\n      //     const iaPoint = await iaTurn(plateau, { y: newX, x: newY });\n      //     console.log(iaPoint);\n      //     // console.log(currentPlayer, \"a\");\n      //     handlePlayerMove(plateau, iaPoint.y, iaPoint.x, cP.currentPlayer, count);\n      //     // console.log(currentPlayer, \"b\");\n      // }\n    } catch (error) {\n      console.error(\"Erreur lors de la gestion du mouvement du joueur:\", error);\n    }\n  };\n  const iaTurn = async (plateau, dernierPoint) => {\n    try {\n      const response = await axios.put(\"http://localhost:7001/api/Game/IA\", {\n        CircuitList: playersCircuitsList,\n        plateau: plateau,\n        dernierPoint: dernierPoint,\n        currentPlayer: currentPlayer\n      });\n\n      // console.log( response.data);\n      return {\n        x: response.data.currentPlayer,\n        y: response.data.score\n      };\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  const sendDataToServer = async (plateau, dernierPoint) => {\n    try {\n      //https://localhost:44356\n      const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n        CircuitList: playersCircuitsList,\n        plateau: plateau,\n        dernierPoint: dernierPoint,\n        currentPlayer: currentPlayer\n      });\n\n      //console.log(response.data);\n      currentPlayer = response.data.currentPlayer;\n      await setCurrentPlayer(response.data.currentPlayer);\n      // console.log(currentPlayer, \"currentPlayer\", response.data.currentPlayer);\n      // localStorage.setItem(\"scorePlayer\" + currentPlayer, response.data.score);\n\n      const circuitData = response.data.circuitList.map(playerCircuits => playerCircuits.map(circuit => circuit.map(point => ({\n        x: point.x,\n        y: point.y\n      }))));\n      setPlayersCircuitsList(circuitData);\n      const tempScore = response.data.score;\n      if (tempScore != 0) {\n        playersScore[currentPlayer - 1] += tempScore;\n        setPlayersScore(playersScore);\n      }\n      const plateauData = response.data.plateau.map(row => row.map(cell => cell));\n\n      // Mettez � jour l'�tat avec la nouvelle structure de donn�es\n      setPlateau(plateauData);\n      return response.data;\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: marginLeft + width + marginRight,\n    height: marginTop + height + marginBottom,\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onWheel: handleWheel,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [renderPlayerAreas(), renderHorizontalLines(), renderVerticalLines(), drawClosedCircuit(), playerPoints.map((points, playerIndex) => points.map((point, index) => /*#__PURE__*/_jsxDEV(Circle, {\n        x: point.x * scale + marginLeft,\n        y: point.y * scale + marginTop,\n        radius: radius,\n        fill: joueurs[playerIndex].color\n      }, `${playerIndex}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 25\n      }, this))), !scrolling && isValidPoint(mousePos.x, mousePos.y) && /*#__PURE__*/_jsxDEV(Circle, {\n        x: mousePos.x,\n        y: mousePos.y,\n        radius: radius * 2,\n        fill: joueurs[currentPlayer - 1].color,\n        opacity: 0.5 // Opacit� de 50%\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 9\n  }, this);\n};\n\n// Valeurs par d�faut pour les props\n_s(Page, \"dhXhZ5SXs7bJGtBJ0OoxHEpGuaM=\");\n_c = Page;\nPage.defaultProps = {\n  numRows: 22,\n  numCols: 10,\n  totalPlayers: 2\n};\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","useState","useEffect","axios","Stage","Layer","Line","Circle","Rect","jsxDEV","_jsxDEV","Page","setZoomSlider","zoomSlider","playersScore","setPlayersScore","height","setHeight","width","setWidth","scale","setScale","totalPlayers","numRows","numCols","plateau","setPlateau","timeElapsed","currentPlayer","setCurrentPlayer","joueurs","_s","marginTop","setMarginTop","marginBottom","setMarginBottom","marginLeft","setMarginLeft","marginRight","setMarginRight","radius","setRadius","echelle","setEchelle","scrolling","setScrolling","handleWheel","event","evt","preventDefault","molette","deltaY","console","log","Math","round","prevMarginTop","prevMarginBottom","prevMarginLeft","prevMarginRight","prevRadius","value","handleZoomSliderChange","parseInt","addEventListener","removeEventListener","playerPoints","setPlayerPoints","Array","from","length","playersCircuitsList","setPlayersCircuitsList","fill","map","drawClosedCircuit","lines","playerIndex","circuits","color","circuitIndex","circuit","points","flatMap","point","x","y","push","stroke","strokeWidth","closed","lineJoin","lineCap","fileName","_jsxFileName","lineNumber","columnNumber","renderPlayerAreas","areas","player4Areas","player","player3Areas","playerAreas","forEach","opacity","children","renderHorizontalLines","spacing","startY","totalWidth","initialIncrement","k","aboveFirstYPosition","i","mainYPosition","increment","j","intermediateYPosition","belowLastYPosition","m","belowLastYIncrement","renderVerticalLines","getClosestIntersection","closestX","closestY","isValidPoint","mousePos","setMousePos","handleMouseMove","target","getStage","getPointerPosition","handleClick","newX","newY","localStorage","setItem","handlePlayerMove","count","updatedPlayerPoints","cP","sendDataToServer","error","iaTurn","dernierPoint","response","put","CircuitList","data","score","circuitData","circuitList","playerCircuits","tempScore","plateauData","row","cell","onClick","onMouseMove","onWheel","index","_c","defaultProps","$RefreshReg$"],"sources":["E:/Projects/GPL3/point-game/src/Page.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\n\nconst Page = ({ setZoomSlider, zoomSlider, playersScore, setPlayersScore, height, setHeight, width, setWidth, scale, setScale, totalPlayers, numRows, numCols, plateau, setPlateau, timeElapsed, currentPlayer, setCurrentPlayer, joueurs}) => {\n\n    React.useEffect(() => {\n        if (timeElapsed <= 0) {\n            setCurrentPlayer(currentPlayer % totalPlayers + 1);\n            // localStorage.setItem(\"currentPlayer\", currentPlayer % totalPlayers + 1);\n            //console.log('turn', currentPlayer % totalPlayers + 1);\n        }\n    }, [timeElapsed, currentPlayer, totalPlayers]);\n\n    const [marginTop, setMarginTop] = useState(scale * 3);\n    const [marginBottom, setMarginBottom] = useState(scale * 2);\n    const [marginLeft, setMarginLeft] = useState(scale * 4);\n    const [marginRight, setMarginRight] = useState(scale * 4 / 5);\n    const [radius, setRadius] = useState(scale / 7);\n\n    //let s = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n    //setWidth(marginLeft + numCols * scale + marginRight);\n    let [echelle, setEchelle] = useState(1.1); // Nouvelle variable echelle � 1 par d�faut\n    const [scrolling, setScrolling] = useState(false); // �tat pour suivre si le d�filement est actif\n\n    // Gestionnaire d'�v�nements pour la molette\n    const handleWheel = (event) => {\n        event.evt.preventDefault(); // Utiliser l'�v�nement natif pour pr�venir le comportement par d�faut\n        const molette = event.evt.deltaY;\n        console.log(\"molette\", molette, \" \", (molette < 0));\n\n        echelle = (molette < 0) ? 1.1 : (1 / 1.1);\n        setEchelle(echelle);\n\n        console.log(\"cell\", scale, \"radius\", radius, \"echelle\", echelle, \"newE\", echelle);\n\n\n        if (((scale > 20) || molette < 0) && ((scale < 120) || molette > 0)) {\n            scale = Math.round(scale * echelle);\n            setScale(scale);\n            // Ajuster les marges en fonction de l'�chelle\n            setMarginTop((prevMarginTop) => Math.round(prevMarginTop * echelle));\n            setMarginBottom((prevMarginBottom) => Math.round(prevMarginBottom * echelle));\n            setMarginLeft((prevMarginLeft) => Math.round(prevMarginLeft * echelle));\n            setMarginRight((prevMarginRight) => Math.round(prevMarginRight * echelle));\n            setRadius((prevRadius) => prevRadius * echelle);\n            setWidth(numCols * scale);\n            setHeight(numRows * scale);\n            zoomSlider.value = scale;\n            setZoomSlider(zoomSlider);\n        }\n        // Indiquer que le d�filement est actif\n        setScrolling(true);\n\n        console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n        console.log(\"width\", width, \" height\", height);\n        \n    };\n\n    useEffect(() => {\n        if (zoomSlider) {\n            const handleZoomSliderChange = () => {\n                const echelle = parseInt(zoomSlider.value) / scale;\n                scale = Math.round(scale * echelle);\n                setScale(scale);\n                setMarginTop((prevMarginTop) => Math.round(prevMarginTop * echelle));\n                setMarginBottom((prevMarginBottom) => Math.round(prevMarginBottom * echelle));\n                setMarginLeft((prevMarginLeft) => Math.round(prevMarginLeft * echelle));\n                setMarginRight((prevMarginRight) => Math.round(prevMarginRight * echelle));\n                setRadius((prevRadius) => prevRadius * echelle);\n                setWidth(numCols * scale);\n                setHeight(numRows * scale);\n                console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n                console.log(\"width\", width, \" height\", height);\n            };\n\n            zoomSlider.addEventListener('input', handleZoomSliderChange);\n            return () => zoomSlider.removeEventListener('input', handleZoomSliderChange);\n        }\n    }, [zoomSlider, echelle, numCols, numRows]);\n\n\n    // Tableaux pour stocker les points de chaque joueur avec leur couleur\n    const [playerPoints, setPlayerPoints] = useState(Array.from({ length: totalPlayers }, () => []));\n\n\n    // Initialisation des circuits pour chaque joueur\n    const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n\n\n\n    const drawClosedCircuit = () => {\n        let lines = [];\n\n        for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n            let circuits = playersCircuitsList[playerIndex];\n            let color = joueurs[playerIndex].color; \n\n            for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n                const circuit = circuits[circuitIndex];\n                const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n\n                lines.push(\n                    <Line\n                        key={`player-${playerIndex}-circuit-${circuitIndex}`}\n                        points={points}\n                        stroke={color}\n                        strokeWidth={radius * 2 / 5}\n                        closed={true} // Fermer le circuit\n                        lineJoin=\"round\"\n                        lineCap=\"round\"\n                    />\n                );\n            }\n        }\n        \n        return lines;\n    };\n\n    const renderPlayerAreas = () => {\n        const areas = [];\n      \n        // Définir les propriétés des zones selon les joueurs\n        const player4Areas = [\n            { player: 1, x: marginLeft, y: marginTop, width: (7 * width) / 22, height: height, color: joueurs[0].color },\n            { player: 2, x: marginLeft + width - (7 * width) / 22, y: marginTop, width: (7 * width) / 22, height: height, color: joueurs[1].color },\n            { player: 3, x: marginLeft, y: marginTop, width: width, height: (7 * height) / 22, color: joueurs[2].color },\n            { player: 4, x: marginLeft, y: marginTop + height - (7 * height) / 22, width: width, height: (7 * height) / 22, color: joueurs[3].color },\n        ];\n\n        const player3Areas = [];\n    \n        // Boucle pour ajouter les zones selon le joueur courant\n        \n        playerAreas.forEach(({ player, x, y, width, height, color }) => {\n            if (currentPlayer === player) {\n                areas.push(\n                    <Rect\n                        key={`player${player}-restricted-area`}\n                        x={x}\n                        y={y}\n                        width={width}\n                        height={height}\n                        fill={color}  // Couleur du joueur\n                        opacity={0.2} // Opacité pour visualiser\n                    />\n                );\n            }\n        });\n    \n        return areas;\n    };\n    \n    // Exemple d'utilisation dans la fonction principale\n    const Page = ({\n        // autres props\n        currentPlayer,\n        joueurs,\n        marginLeft,\n        marginTop,\n        width,\n        height,\n    }) => {\n        return (\n            <Stage width={width} height={height}>\n                <Layer>\n                    {renderPlayerAreas()} {/* Appeler la fonction simplifiée */}\n                    {/* Autres éléments du plateau */}\n                </Layer>\n            </Stage>\n        );\n    };\n    \n    \n        \n\n    const renderHorizontalLines = () => {\n        const lines = [];\n\n        // Espacement entre les lignes principales\n        const spacing = scale;\n        const startY = marginTop;\n        const totalWidth = marginLeft + width + marginRight; // Largeur totale ajust�e\n\n        // Ajouter trois lignes interm�diaires au-dessus de la premi�re ligne principale\n        const initialIncrement = spacing / 4;\n        for (let k = 1; k <= 3; k++) {\n            const aboveFirstYPosition = startY - k * initialIncrement;\n\n            lines.push(\n                <Line\n                    key={`hline-above-first-${k}`}\n                    points={[0, aboveFirstYPosition, totalWidth, aboveFirstYPosition]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                />\n            );\n        }\n\n        for (let i = 0; i <= numRows; i++) {\n            // Position de la ligne principale\n            const mainYPosition = startY + i * spacing;\n\n            // Ajouter la ligne principale\n            lines.push(\n                <Line\n                    key={`hline-main-${i}`}\n                    points={[0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 4} // Ajustement de l'�paisseur de la ligne\n                />\n            );\n\n            // Ajouter trois lignes interm�diaires entre la ligne actuelle et la suivante\n            if (i < numRows) {\n                const increment = spacing / 4; // Espacement des lignes interm�diaires\n\n                for (let j = 1; j <= 3; j++) {\n                    const intermediateYPosition = mainYPosition + j * increment;\n\n                    lines.push(\n                        <Line\n                            key={`hline-intermediate-${i}-${j}`}\n                            points={[0, intermediateYPosition, totalWidth, intermediateYPosition]}\n                            stroke=\"#4455C9DD\"\n                            strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                        />\n                    );\n                }\n            }\n        }\n\n        // Ajouter deux lignes interm�diaires en dessous de la derni�re ligne principale\n        const belowLastYPosition = startY + numRows * spacing;\n        for (let m = 1; m <= 2; m++) {\n            const belowLastYIncrement = belowLastYPosition + m * initialIncrement;\n\n            lines.push(\n                <Line\n                    key={`hline-below-last-${m}`}\n                    points={[0, belowLastYIncrement, totalWidth, belowLastYIncrement]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                />\n            );\n        }\n\n        return lines;\n    };\n\n\n\n    const renderVerticalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numCols; i++) {\n            lines.push(\n                <Line\n                    key={`vline${i}`}\n                    points={[marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom]}\n                    stroke={i === 0 ? \"#FF0000CC\" : \"#4455C9DD\"}\n                    strokeWidth={radius / 4}\n                />\n            );\n        }\n        return lines;\n    };\n\n    // Calculer l'intersection la plus proche\n    const getClosestIntersection = (x, y) => {\n        const closestX = Math.round((x - marginLeft) / scale) * scale;\n        const closestY = Math.round((y - marginTop) / scale) * scale;\n\n        return { x: closestX + marginLeft, y: closestY + marginTop };\n    };\n\n    const isValidPoint = (x, y) => {\n        return ((x > marginLeft - 20) && (x < marginLeft + width + 20) && (y > marginTop - 20) && (y < marginTop + height + 20));\n    }\n\n    const [mousePos, setMousePos] = useState({ x: 0, y: 0 }); // �tat pour la position de la souris\n\n    // G�rer le mouvement de la souris \n    const handleMouseMove = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n        setScrolling(false);\n\n        if (isValidPoint(x, y)) {\n            setMousePos({ x: closestX, y: closestY });\n        }\n    };\n\n    // ************************************************************************************************************* //\n    // *********** ATO NO MIASA LE GAME **************************************************************************** //\n    // ************************************************************************************************************* //\n    const handleClick = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n\n        const newX = Math.round((x - marginLeft) / scale) + 1; // Calcul de la colonne la plus proche\n        const newY = Math.round((y - marginTop) / scale) + 1; // Calcul de la ligne la plus proche\n\n        if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n            //reset temps de reflexion\n            localStorage.setItem('reset', 'true');\n\n            // setCurrentPlayer(currentPlayer % totalPlayers + 1);\n            handlePlayerMove(plateau, newX, newY, currentPlayer, 0);\n\n        }\n    };\n    const handlePlayerMove = async (plateau, newX, newY, currentPlayer, count) => {\n        // Ajouter le point au joueur courant\n        const updatedPlayerPoints = [...playerPoints];\n        updatedPlayerPoints[currentPlayer - 1].push({ x: newX - 1, y: newY - 1 });\n        setPlayerPoints(updatedPlayerPoints);\n        \n        plateau[newY][newX] = currentPlayer;\n\n        // Mettre  jour l'tat plateau avec la nouvelle matrice\n        setPlateau(plateau);\n\n        try {\n            // Appel de la fonction avec les donn�es � envoyer et attendre qu'elle se termine\n            let cP = await sendDataToServer(plateau, { x: newX, y: newY });\n\n            // console.log(\"cp\", cP);\n            // if (cP.currentPlayer === 2 && count < 1) {\n            //     console.log(\"tonga eto\");\n            //     const iaPoint = await iaTurn(plateau, { y: newX, x: newY });\n            //     console.log(iaPoint);\n            //     // console.log(currentPlayer, \"a\");\n            //     handlePlayerMove(plateau, iaPoint.y, iaPoint.x, cP.currentPlayer, count);\n            //     // console.log(currentPlayer, \"b\");\n            // }\n            \n        } catch (error) {\n            console.error(\"Erreur lors de la gestion du mouvement du joueur:\", error);\n        }\n    };\n\n    const iaTurn = async (plateau, dernierPoint) => {\n        try {\n            const response = await axios.put(\"http://localhost:7001/api/Game/IA\", {\n                CircuitList: playersCircuitsList,\n                plateau: plateau,\n                dernierPoint: dernierPoint,\n                currentPlayer: currentPlayer\n            });\n\n            // console.log( response.data);\n            return {x: response.data.currentPlayer, y: response.data.score};\n\n\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    const sendDataToServer = async (plateau, dernierPoint) => {\n        try {//https://localhost:44356\n            const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n                CircuitList: playersCircuitsList,\n                plateau: plateau,\n                dernierPoint: dernierPoint,\n                currentPlayer: currentPlayer\n            });\n\n            //console.log(response.data);\n            currentPlayer = response.data.currentPlayer;\n            await setCurrentPlayer(response.data.currentPlayer);\n            // console.log(currentPlayer, \"currentPlayer\", response.data.currentPlayer);\n            // localStorage.setItem(\"scorePlayer\" + currentPlayer, response.data.score);\n\n            const circuitData = response.data.circuitList.map(playerCircuits =>\n                playerCircuits.map(circuit => circuit.map(point => ({ x: point.x, y: point.y})))\n            );\n\n            setPlayersCircuitsList(circuitData);\n            const tempScore = response.data.score;\n            if (tempScore != 0) {\n                playersScore[currentPlayer - 1] += tempScore;\n                setPlayersScore(playersScore);\n            }\n\n            const plateauData = response.data.plateau.map(row =>\n                row.map(cell => cell)\n            );\n\n            // Mettez � jour l'�tat avec la nouvelle structure de donn�es\n            setPlateau(plateauData);\n\n            return response.data;\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    return (\n        <Stage\n            width={marginLeft + width + marginRight}\n            height={marginTop + height + marginBottom}\n            onClick={handleClick}\n            onMouseMove={handleMouseMove}\n            onWheel={handleWheel}\n        >\n            <Layer>\n                {renderPlayerAreas()} \n                {renderHorizontalLines()}\n                {renderVerticalLines()}\n\n                {drawClosedCircuit()}\n\n                {/* Rendu des points par joueur */}\n                {playerPoints.map((points, playerIndex) =>\n                    points.map((point, index) => (\n                        <Circle\n                            key={`${playerIndex}-${index}`}\n                            x={point.x * scale + marginLeft}\n                            y={point.y * scale + marginTop}\n                            radius={radius}\n                            fill={joueurs[playerIndex].color}\n                        />\n                    ))\n                )}\n\n                {/* Cercle qui suit la souris */}\n                {!scrolling && isValidPoint(mousePos.x, mousePos.y) && (\n                    <Circle\n                        x={mousePos.x}\n                        y={mousePos.y}\n                        radius={radius * 2}\n                        fill={joueurs[currentPlayer - 1].color}\n                        opacity={0.5} // Opacit� de 50%\n                    />\n                )}\n\n            </Layer>\n        </Stage>\n    );\n};\n\n// Valeurs par d�faut pour les props\nPage.defaultProps = {\n    numRows: 22,\n    numCols: 10,\n    totalPlayers: 2\n};\n\nexport default Page;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}