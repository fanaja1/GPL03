{"ast":null,"code":"var _jsxFileName = \"D:\\\\GP\\\\GPL3\\\\point-game\\\\src\\\\Page.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page = ({\n  setZoomSlider,\n  zoomSlider,\n  playersScore,\n  setPlayersScore,\n  height,\n  setHeight,\n  width,\n  setWidth,\n  scale,\n  setScale,\n  totalPlayers,\n  numRows,\n  numCols,\n  plateau,\n  setPlateau,\n  timeElapsed,\n  currentPlayer,\n  setCurrentPlayer,\n  joueurs\n}) => {\n  _s();\n  React.useEffect(() => {\n    if (timeElapsed <= 0) {\n      setCurrentPlayer(currentPlayer % totalPlayers + 1);\n      // localStorage.setItem(\"currentPlayer\", currentPlayer % totalPlayers + 1);\n      //console.log('turn', currentPlayer % totalPlayers + 1);\n    }\n  }, [timeElapsed, currentPlayer, totalPlayers]);\n  const [marginTop, setMarginTop] = useState(scale * 3);\n  const [marginBottom, setMarginBottom] = useState(scale * 2);\n  const [marginLeft, setMarginLeft] = useState(scale * 4);\n  const [marginRight, setMarginRight] = useState(scale * 4 / 5);\n  const [radius, setRadius] = useState(scale / 7);\n\n  //let s = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n  //setWidth(marginLeft + numCols * scale + marginRight);\n  let [echelle, setEchelle] = useState(1.1); // Nouvelle variable echelle � 1 par d�faut\n  const [scrolling, setScrolling] = useState(false); // �tat pour suivre si le d�filement est actif\n\n  // Gestionnaire d'�v�nements pour la molette\n  const handleWheel = event => {\n    event.evt.preventDefault(); // Utiliser l'�v�nement natif pour pr�venir le comportement par d�faut\n    const molette = event.evt.deltaY;\n    console.log(\"molette\", molette, \" \", molette < 0);\n    echelle = molette < 0 ? 1.1 : 1 / 1.1;\n    setEchelle(echelle);\n    console.log(\"cell\", scale, \"radius\", radius, \"echelle\", echelle, \"newE\", echelle);\n    if ((scale > 20 || molette < 0) && (scale < 120 || molette > 0)) {\n      scale = Math.round(scale * echelle);\n      setScale(scale);\n      // Ajuster les marges en fonction de l'�chelle\n      setMarginTop(prevMarginTop => Math.round(prevMarginTop * echelle));\n      setMarginBottom(prevMarginBottom => Math.round(prevMarginBottom * echelle));\n      setMarginLeft(prevMarginLeft => Math.round(prevMarginLeft * echelle));\n      setMarginRight(prevMarginRight => Math.round(prevMarginRight * echelle));\n      setRadius(prevRadius => prevRadius * echelle);\n      setWidth(numCols * scale);\n      setHeight(numRows * scale);\n      zoomSlider.value = scale;\n      setZoomSlider(zoomSlider);\n    }\n    // Indiquer que le d�filement est actif\n    setScrolling(true);\n    console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n    console.log(\"width\", width, \" height\", height);\n  };\n  useEffect(() => {\n    if (zoomSlider) {\n      const handleZoomSliderChange = () => {\n        const echelle = parseInt(zoomSlider.value) / scale;\n        scale = Math.round(scale * echelle);\n        setScale(scale);\n        setMarginTop(prevMarginTop => Math.round(prevMarginTop * echelle));\n        setMarginBottom(prevMarginBottom => Math.round(prevMarginBottom * echelle));\n        setMarginLeft(prevMarginLeft => Math.round(prevMarginLeft * echelle));\n        setMarginRight(prevMarginRight => Math.round(prevMarginRight * echelle));\n        setRadius(prevRadius => prevRadius * echelle);\n        setWidth(numCols * scale);\n        setHeight(numRows * scale);\n        console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n        console.log(\"width\", width, \" height\", height);\n      };\n      zoomSlider.addEventListener('input', handleZoomSliderChange);\n      return () => zoomSlider.removeEventListener('input', handleZoomSliderChange);\n    }\n  }, [zoomSlider, echelle, numCols, numRows]);\n\n  // Tableaux pour stocker les points de chaque joueur avec leur couleur\n  const [playerPoints, setPlayerPoints] = useState(Array.from({\n    length: totalPlayers\n  }, () => []));\n\n  // Initialisation des circuits pour chaque joueur\n  const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n  const drawClosedCircuit = () => {\n    let lines = [];\n    for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n      let circuits = playersCircuitsList[playerIndex];\n      let color = joueurs[playerIndex].color;\n      for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n        const circuit = circuits[circuitIndex];\n        const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n        lines.push( /*#__PURE__*/_jsxDEV(Line, {\n          points: points,\n          stroke: color,\n          strokeWidth: radius * 2 / 5,\n          closed: true // Fermer le circuit\n          ,\n          lineJoin: \"round\",\n          lineCap: \"round\"\n        }, `player-${playerIndex}-circuit-${circuitIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    return lines;\n  };\n  const renderPlayerAreas = () => {\n    const gameMode = localStorage.getItem(\"gameMode\");\n    if (gameMode === \"normal\") {\n      return;\n    } else if (gameMode === \"shared\") {\n      const areas = [];\n\n      // Définir les propriétés des zones pour 4 joueurs\n      const player4Areas = [{\n        player: 1,\n        x: marginLeft,\n        y: marginTop,\n        width: 7 * width / 22,\n        height: height,\n        color: joueurs[0].color\n      }, {\n        player: 2,\n        x: marginLeft + width - 7 * width / 22,\n        y: marginTop,\n        width: 7 * width / 22,\n        height: height,\n        color: joueurs[1].color\n      }, {\n        player: 3,\n        x: marginLeft,\n        y: marginTop,\n        width: width,\n        height: 7 * height / 22,\n        color: joueurs[2].color\n      }, {\n        player: 4,\n        x: marginLeft,\n        y: marginTop + height - 7 * height / 22,\n        width: width,\n        height: 7 * height / 22,\n        color: joueurs[3].color\n      }];\n\n      // Définir les propriétés des zones pour 3 joueurs\n      const player3Areas = [{\n        player: 1,\n        x: marginLeft,\n        y: marginTop,\n        width: width / 3,\n        height: height,\n        color: joueurs[0].color\n      },\n      // Joueur 1 (gauche)\n      {\n        player: 2,\n        x: marginLeft + width / 3,\n        y: marginTop,\n        width: width / 3,\n        height: height,\n        color: joueurs[1].color\n      },\n      // Joueur 2 (milieu)\n      {\n        player: 3,\n        x: marginLeft + 2 * width / 3,\n        y: marginTop,\n        width: width / 3,\n        height: height,\n        color: joueurs[2].color\n      } // Joueur 3 (droite)\n      ];\n\n      // Boucle pour ajouter les zones selon le nombre total de joueurs\n      if (totalPlayers === 4) {\n        player4Areas.forEach(({\n          player,\n          x,\n          y,\n          width,\n          height,\n          color\n        }) => {\n          if (currentPlayer === player) {\n            areas.push( /*#__PURE__*/_jsxDEV(Rect, {\n              x: x,\n              y: y,\n              width: width,\n              height: height,\n              fill: color // Couleur du joueur\n              ,\n              opacity: 0.2 // Opacité pour visualiser\n            }, `player${player}-restricted-area`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this));\n          }\n        });\n      } else if (totalPlayers === 3) {\n        player3Areas.forEach(({\n          player,\n          x,\n          y,\n          width,\n          height,\n          color\n        }) => {\n          if (currentPlayer === player) {\n            areas.push( /*#__PURE__*/_jsxDEV(Rect, {\n              x: x,\n              y: y,\n              width: width,\n              height: height,\n              fill: color // Couleur du joueur\n              ,\n              opacity: 0.2 // Opacité pour visualiser\n            }, `player${player}-restricted-area`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this));\n          }\n        });\n      }\n      return areas;\n    }\n  };\n  const renderHorizontalLines = () => {\n    const lines = [];\n\n    // Espacement entre les lignes principales\n    const spacing = scale;\n    const startY = marginTop;\n    const totalWidth = marginLeft + width + marginRight; // Largeur totale ajust�e\n\n    // Ajouter trois lignes interm�diaires au-dessus de la premi�re ligne principale\n    const initialIncrement = spacing / 4;\n    for (let k = 1; k <= 3; k++) {\n      const aboveFirstYPosition = startY - k * initialIncrement;\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, aboveFirstYPosition, totalWidth, aboveFirstYPosition],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n      }, `hline-above-first-${k}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this));\n    }\n    for (let i = 0; i <= numRows; i++) {\n      // Position de la ligne principale\n      const mainYPosition = startY + i * spacing;\n\n      // Ajouter la ligne principale\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 4 // Ajustement de l'�paisseur de la ligne\n      }, `hline-main-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this));\n\n      // Ajouter trois lignes interm�diaires entre la ligne actuelle et la suivante\n      if (i < numRows) {\n        const increment = spacing / 4; // Espacement des lignes interm�diaires\n\n        for (let j = 1; j <= 3; j++) {\n          const intermediateYPosition = mainYPosition + j * increment;\n          lines.push( /*#__PURE__*/_jsxDEV(Line, {\n            points: [0, intermediateYPosition, totalWidth, intermediateYPosition],\n            stroke: \"#4455C9DD\",\n            strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n          }, `hline-intermediate-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this));\n        }\n      }\n    }\n\n    // Ajouter deux lignes interm�diaires en dessous de la derni�re ligne principale\n    const belowLastYPosition = startY + numRows * spacing;\n    for (let m = 1; m <= 2; m++) {\n      const belowLastYIncrement = belowLastYPosition + m * initialIncrement;\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, belowLastYIncrement, totalWidth, belowLastYIncrement],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n      }, `hline-below-last-${m}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  const renderVerticalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numCols; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom],\n        stroke: i === 0 ? \"#FF0000CC\" : \"#4455C9DD\",\n        strokeWidth: radius / 4\n      }, `vline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n\n  // Calculer l'intersection la plus proche\n  const getClosestIntersection = (x, y) => {\n    const closestX = Math.round((x - marginLeft) / scale) * scale;\n    const closestY = Math.round((y - marginTop) / scale) * scale;\n    return {\n      x: closestX + marginLeft,\n      y: closestY + marginTop\n    };\n  };\n  const isValidPoint = (x, y) => {\n    let out = false;\n    const gameMode = localStorage.getItem(\"gameMode\");\n    if (gameMode === \"normal\") {\n      out = true;\n    } else if (gameMode === \"shared\") {\n      switch (currentPlayer) {\n        case 1:\n          out = totalPlayers == 3 ? x > marginLeft + width / 3 : x > marginLeft + 7 * width / 22;\n          break;\n        case 2:\n          out = totalPlayers == 3 ? x < marginLeft + width / 3 || x > marginLeft + 2 * width / 3 : x < marginLeft + width - 7 * width / 22;\n          break;\n        case 3:\n          out = totalPlayers == 3 ? x < marginLeft + 2 * width / 3 : y > marginTop + 7 * height / 22;\n          break;\n        case 4:\n          out = y < height + marginTop - 7 * height / 22;\n          break;\n        default:\n          break;\n      }\n    }\n    return out && x > marginLeft - 20 && x < marginLeft + width + 20 && y > marginTop - 20 && y < marginTop + height + 20;\n  };\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  }); // �tat pour la position de la souris\n\n  // G�rer le mouvement de la souris \n  const handleMouseMove = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    setScrolling(false);\n    if (isValidPoint(x, y)) {\n      setMousePos({\n        x: closestX,\n        y: closestY\n      });\n    }\n  };\n\n  // ************************************************************************************************************* //\n  // *********** ATO NO MIASA LE GAME **************************************************************************** //\n  // ************************************************************************************************************* //\n  const handleClick = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const newX = Math.round((x - marginLeft) / scale) + 1; // Calcul de la colonne la plus proche\n    const newY = Math.round((y - marginTop) / scale) + 1; // Calcul de la ligne la plus proche\n\n    if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n      //reset temps de reflexion\n      localStorage.setItem('reset', 'true');\n\n      // setCurrentPlayer(currentPlayer % totalPlayers + 1);\n      handlePlayerMove(plateau, newX, newY, currentPlayer, 0);\n    } else {}\n  };\n  const handlePlayerMove = async (plateau, newX, newY, currentPlayer, count) => {\n    // Ajouter le point au joueur courant\n    const updatedPlayerPoints = [...playerPoints];\n    updatedPlayerPoints[currentPlayer - 1].push({\n      x: newX - 1,\n      y: newY - 1\n    });\n    setPlayerPoints(updatedPlayerPoints);\n    plateau[newY][newX] = currentPlayer;\n\n    // Mettre  jour l'tat plateau avec la nouvelle matrice\n    setPlateau(plateau);\n    try {\n      // Appel de la fonction avec les donn�es � envoyer et attendre qu'elle se termine\n      let cP = await sendDataToServer(plateau, {\n        x: newX,\n        y: newY\n      });\n\n      // console.log(\"cp\", cP);\n      // if (cP.currentPlayer === 2 && count < 1) {\n      //     console.log(\"tonga eto\");\n      //     const iaPoint = await iaTurn(plateau, { y: newX, x: newY });\n      //     console.log(iaPoint);\n      //     // console.log(currentPlayer, \"a\");\n      //     handlePlayerMove(plateau, iaPoint.y, iaPoint.x, cP.currentPlayer, count);\n      //     // console.log(currentPlayer, \"b\");\n      // }\n    } catch (error) {\n      console.error(\"Erreur lors de la gestion du mouvement du joueur:\", error);\n    }\n  };\n  const iaTurn = async (plateau, dernierPoint) => {\n    try {\n      const response = await axios.put(\"http://localhost:7001/api/Game/IA\", {\n        CircuitList: playersCircuitsList,\n        plateau: plateau,\n        dernierPoint: dernierPoint,\n        currentPlayer: currentPlayer\n      });\n\n      // console.log( response.data);\n      return {\n        x: response.data.currentPlayer,\n        y: response.data.score\n      };\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  const sendDataToServer = async (plateau, dernierPoint) => {\n    try {\n      //https://localhost:44356\n      const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n        CircuitList: playersCircuitsList,\n        plateau: plateau,\n        dernierPoint: dernierPoint,\n        currentPlayer: currentPlayer\n      });\n\n      //console.log(response.data);\n      currentPlayer = response.data.currentPlayer;\n      await setCurrentPlayer(response.data.currentPlayer);\n      // console.log(currentPlayer, \"currentPlayer\", response.data.currentPlayer);\n      // localStorage.setItem(\"scorePlayer\" + currentPlayer, response.data.score);\n\n      const circuitData = response.data.circuitList.map(playerCircuits => playerCircuits.map(circuit => circuit.map(point => ({\n        x: point.x,\n        y: point.y\n      }))));\n      setPlayersCircuitsList(circuitData);\n      const tempScore = response.data.score;\n      if (tempScore != 0) {\n        playersScore[currentPlayer - 1] += tempScore;\n        setPlayersScore(playersScore);\n        for (let i = 1; i <= localStorage.getItem(\"totalPlayers\"); i++) {\n          localStorage.setItem(\"score\" + i, playersScore[i - 1]);\n        }\n        // localStorage.setItem(\"score\"+currentPlayer, playersScore[currentPlayer - 1]);\n        console.log(\"score\" + currentPlayer + \" \" + localStorage.getItem(\"score\" + currentPlayer));\n      }\n      const plateauData = response.data.plateau.map(row => row.map(cell => cell));\n\n      // Mettez � jour l'�tat avec la nouvelle structure de donn�es\n      setPlateau(plateauData);\n      return response.data;\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: marginLeft + width + marginRight,\n    height: marginTop + height + marginBottom,\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onWheel: handleWheel,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [renderPlayerAreas(), renderHorizontalLines(), renderVerticalLines(), drawClosedCircuit(), playerPoints.map((points, playerIndex) => points.map((point, index) => /*#__PURE__*/_jsxDEV(Circle, {\n        x: point.x * scale + marginLeft,\n        y: point.y * scale + marginTop,\n        radius: radius,\n        fill: joueurs[playerIndex].color\n      }, `${playerIndex}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 25\n      }, this))), !scrolling && isValidPoint(mousePos.x, mousePos.y) && /*#__PURE__*/_jsxDEV(Circle, {\n        x: mousePos.x,\n        y: mousePos.y,\n        radius: radius * 2,\n        fill: joueurs[currentPlayer - 1].color,\n        opacity: 0.5 // Opacit� de 50%\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 9\n  }, this);\n};\n\n// Valeurs par d�faut pour les props\n_s(Page, \"dhXhZ5SXs7bJGtBJ0OoxHEpGuaM=\");\n_c = Page;\nPage.defaultProps = {\n  numRows: 22,\n  numCols: 10,\n  totalPlayers: 2\n};\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","useState","useEffect","axios","Stage","Layer","Line","Circle","Rect","jsxDEV","_jsxDEV","Page","setZoomSlider","zoomSlider","playersScore","setPlayersScore","height","setHeight","width","setWidth","scale","setScale","totalPlayers","numRows","numCols","plateau","setPlateau","timeElapsed","currentPlayer","setCurrentPlayer","joueurs","_s","marginTop","setMarginTop","marginBottom","setMarginBottom","marginLeft","setMarginLeft","marginRight","setMarginRight","radius","setRadius","echelle","setEchelle","scrolling","setScrolling","handleWheel","event","evt","preventDefault","molette","deltaY","console","log","Math","round","prevMarginTop","prevMarginBottom","prevMarginLeft","prevMarginRight","prevRadius","value","handleZoomSliderChange","parseInt","addEventListener","removeEventListener","playerPoints","setPlayerPoints","Array","from","length","playersCircuitsList","setPlayersCircuitsList","fill","map","drawClosedCircuit","lines","playerIndex","circuits","color","circuitIndex","circuit","points","flatMap","point","x","y","push","stroke","strokeWidth","closed","lineJoin","lineCap","fileName","_jsxFileName","lineNumber","columnNumber","renderPlayerAreas","gameMode","localStorage","getItem","areas","player4Areas","player","player3Areas","forEach","opacity","renderHorizontalLines","spacing","startY","totalWidth","initialIncrement","k","aboveFirstYPosition","i","mainYPosition","increment","j","intermediateYPosition","belowLastYPosition","m","belowLastYIncrement","renderVerticalLines","getClosestIntersection","closestX","closestY","isValidPoint","out","mousePos","setMousePos","handleMouseMove","target","getStage","getPointerPosition","handleClick","newX","newY","setItem","handlePlayerMove","count","updatedPlayerPoints","cP","sendDataToServer","error","iaTurn","dernierPoint","response","put","CircuitList","data","score","circuitData","circuitList","playerCircuits","tempScore","plateauData","row","cell","onClick","onMouseMove","onWheel","children","index","_c","defaultProps","$RefreshReg$"],"sources":["D:/GP/GPL3/point-game/src/Page.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle, Rect } from 'react-konva';\n\nconst Page = ({ setZoomSlider, zoomSlider, playersScore, setPlayersScore, height, setHeight, width, setWidth, scale, setScale, totalPlayers, numRows, numCols, plateau, setPlateau, timeElapsed, currentPlayer, setCurrentPlayer, joueurs}) => {\n\n    React.useEffect(() => {\n        if (timeElapsed <= 0) {\n            setCurrentPlayer(currentPlayer % totalPlayers + 1);\n            // localStorage.setItem(\"currentPlayer\", currentPlayer % totalPlayers + 1);\n            //console.log('turn', currentPlayer % totalPlayers + 1);\n        }\n    }, [timeElapsed, currentPlayer, totalPlayers]);\n\n    const [marginTop, setMarginTop] = useState(scale * 3);\n    const [marginBottom, setMarginBottom] = useState(scale * 2);\n    const [marginLeft, setMarginLeft] = useState(scale * 4);\n    const [marginRight, setMarginRight] = useState(scale * 4 / 5);\n    const [radius, setRadius] = useState(scale / 7);\n\n    //let s = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n    //setWidth(marginLeft + numCols * scale + marginRight);\n    let [echelle, setEchelle] = useState(1.1); // Nouvelle variable echelle � 1 par d�faut\n    const [scrolling, setScrolling] = useState(false); // �tat pour suivre si le d�filement est actif\n\n    // Gestionnaire d'�v�nements pour la molette\n    const handleWheel = (event) => {\n        event.evt.preventDefault(); // Utiliser l'�v�nement natif pour pr�venir le comportement par d�faut\n        const molette = event.evt.deltaY;\n        console.log(\"molette\", molette, \" \", (molette < 0));\n\n        echelle = (molette < 0) ? 1.1 : (1 / 1.1);\n        setEchelle(echelle);\n\n        console.log(\"cell\", scale, \"radius\", radius, \"echelle\", echelle, \"newE\", echelle);\n\n\n        if (((scale > 20) || molette < 0) && ((scale < 120) || molette > 0)) {\n            scale = Math.round(scale * echelle);\n            setScale(scale);\n            // Ajuster les marges en fonction de l'�chelle\n            setMarginTop((prevMarginTop) => Math.round(prevMarginTop * echelle));\n            setMarginBottom((prevMarginBottom) => Math.round(prevMarginBottom * echelle));\n            setMarginLeft((prevMarginLeft) => Math.round(prevMarginLeft * echelle));\n            setMarginRight((prevMarginRight) => Math.round(prevMarginRight * echelle));\n            setRadius((prevRadius) => prevRadius * echelle);\n            setWidth(numCols * scale);\n            setHeight(numRows * scale);\n            zoomSlider.value = scale;\n            setZoomSlider(zoomSlider);\n        }\n        // Indiquer que le d�filement est actif\n        setScrolling(true);\n\n        console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n        console.log(\"width\", width, \" height\", height);\n        \n    };\n\n    useEffect(() => {\n        if (zoomSlider) {\n            const handleZoomSliderChange = () => {\n                const echelle = parseInt(zoomSlider.value) / scale;\n                scale = Math.round(scale * echelle);\n                setScale(scale);\n                setMarginTop((prevMarginTop) => Math.round(prevMarginTop * echelle));\n                setMarginBottom((prevMarginBottom) => Math.round(prevMarginBottom * echelle));\n                setMarginLeft((prevMarginLeft) => Math.round(prevMarginLeft * echelle));\n                setMarginRight((prevMarginRight) => Math.round(prevMarginRight * echelle));\n                setRadius((prevRadius) => prevRadius * echelle);\n                setWidth(numCols * scale);\n                setHeight(numRows * scale);\n                console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n                console.log(\"width\", width, \" height\", height);\n            };\n\n            zoomSlider.addEventListener('input', handleZoomSliderChange);\n            return () => zoomSlider.removeEventListener('input', handleZoomSliderChange);\n        }\n    }, [zoomSlider, echelle, numCols, numRows]);\n\n\n    // Tableaux pour stocker les points de chaque joueur avec leur couleur\n    const [playerPoints, setPlayerPoints] = useState(Array.from({ length: totalPlayers }, () => []));\n\n\n    // Initialisation des circuits pour chaque joueur\n    const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n\n\n\n    const drawClosedCircuit = () => {\n        let lines = [];\n\n        for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n            let circuits = playersCircuitsList[playerIndex];\n            let color = joueurs[playerIndex].color; \n\n            for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n                const circuit = circuits[circuitIndex];\n                const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n\n                lines.push(\n                    <Line\n                        key={`player-${playerIndex}-circuit-${circuitIndex}`}\n                        points={points}\n                        stroke={color}\n                        strokeWidth={radius * 2 / 5}\n                        closed={true} // Fermer le circuit\n                        lineJoin=\"round\"\n                        lineCap=\"round\"\n                    />\n                );\n            }\n        }\n        \n        return lines;\n    };\n\n    const renderPlayerAreas = () => {\n        const gameMode = localStorage.getItem(\"gameMode\");\n\n        if (gameMode === \"normal\") {\n            return;\n        } else if (gameMode === \"shared\") {\n\n            const areas = [];\n\n            // Définir les propriétés des zones pour 4 joueurs\n            const player4Areas = [\n                { player: 1, x: marginLeft, y: marginTop, width: (7 * width) / 22, height: height, color: joueurs[0].color },\n                { player: 2, x: marginLeft + width - (7 * width) / 22, y: marginTop, width: (7 * width) / 22, height: height, color: joueurs[1].color },\n                { player: 3, x: marginLeft, y: marginTop, width: width, height: (7 * height) / 22, color: joueurs[2].color },\n                { player: 4, x: marginLeft, y: marginTop + height - (7 * height) / 22, width: width, height: (7 * height) / 22, color: joueurs[3].color },\n            ];\n\n            // Définir les propriétés des zones pour 3 joueurs\n            const player3Areas = [\n                { player: 1, x: marginLeft, y: marginTop, width: width / 3, height: height, color: joueurs[0].color },  // Joueur 1 (gauche)\n                { player: 2, x: marginLeft + width / 3, y: marginTop, width: width / 3, height: height, color: joueurs[1].color }, // Joueur 2 (milieu)\n                { player: 3, x: marginLeft + (2 * width) / 3, y: marginTop, width: width / 3, height: height, color: joueurs[2].color }  // Joueur 3 (droite)\n            ];\n\n            // Boucle pour ajouter les zones selon le nombre total de joueurs\n            if (totalPlayers === 4) {\n                player4Areas.forEach(({ player, x, y, width, height, color }) => {\n                    if (currentPlayer === player) {\n                        areas.push(\n                            <Rect\n                                key={`player${player}-restricted-area`}\n                                x={x}\n                                y={y}\n                                width={width}\n                                height={height}\n                                fill={color}  // Couleur du joueur\n                                opacity={0.2} // Opacité pour visualiser\n                            />\n                        );\n                    }\n                });\n            } else if (totalPlayers === 3) {\n                player3Areas.forEach(({ player, x, y, width, height, color }) => {\n                    if (currentPlayer === player) {\n                        areas.push(\n                            <Rect\n                                key={`player${player}-restricted-area`}\n                                x={x}\n                                y={y}\n                                width={width}\n                                height={height}\n                                fill={color}  // Couleur du joueur\n                                opacity={0.2} // Opacité pour visualiser\n                            />\n                        );\n                    }\n                });\n            }\n\n            return areas\n        }\n    };\n\n\n    const renderHorizontalLines = () => {\n        const lines = [];\n\n        // Espacement entre les lignes principales\n        const spacing = scale;\n        const startY = marginTop;\n        const totalWidth = marginLeft + width + marginRight; // Largeur totale ajust�e\n\n        // Ajouter trois lignes interm�diaires au-dessus de la premi�re ligne principale\n        const initialIncrement = spacing / 4;\n        for (let k = 1; k <= 3; k++) {\n            const aboveFirstYPosition = startY - k * initialIncrement;\n\n            lines.push(\n                <Line\n                    key={`hline-above-first-${k}`}\n                    points={[0, aboveFirstYPosition, totalWidth, aboveFirstYPosition]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                />\n            );\n        }\n\n        for (let i = 0; i <= numRows; i++) {\n            // Position de la ligne principale\n            const mainYPosition = startY + i * spacing;\n\n            // Ajouter la ligne principale\n            lines.push(\n                <Line\n                    key={`hline-main-${i}`}\n                    points={[0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 4} // Ajustement de l'�paisseur de la ligne\n                />\n            );\n\n            // Ajouter trois lignes interm�diaires entre la ligne actuelle et la suivante\n            if (i < numRows) {\n                const increment = spacing / 4; // Espacement des lignes interm�diaires\n\n                for (let j = 1; j <= 3; j++) {\n                    const intermediateYPosition = mainYPosition + j * increment;\n\n                    lines.push(\n                        <Line\n                            key={`hline-intermediate-${i}-${j}`}\n                            points={[0, intermediateYPosition, totalWidth, intermediateYPosition]}\n                            stroke=\"#4455C9DD\"\n                            strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                        />\n                    );\n                }\n            }\n        }\n\n        // Ajouter deux lignes interm�diaires en dessous de la derni�re ligne principale\n        const belowLastYPosition = startY + numRows * spacing;\n        for (let m = 1; m <= 2; m++) {\n            const belowLastYIncrement = belowLastYPosition + m * initialIncrement;\n\n            lines.push(\n                <Line\n                    key={`hline-below-last-${m}`}\n                    points={[0, belowLastYIncrement, totalWidth, belowLastYIncrement]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                />\n            );\n        }\n\n        return lines;\n    };\n\n    const renderVerticalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numCols; i++) {\n            lines.push(\n                <Line\n                    key={`vline${i}`}\n                    points={[marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom]}\n                    stroke={i === 0 ? \"#FF0000CC\" : \"#4455C9DD\"}\n                    strokeWidth={radius / 4}\n                />\n            );\n        }\n        return lines;\n    };\n\n    // Calculer l'intersection la plus proche\n    const getClosestIntersection = (x, y) => {\n        const closestX = Math.round((x - marginLeft) / scale) * scale;\n        const closestY = Math.round((y - marginTop) / scale) * scale;\n\n        return { x: closestX + marginLeft, y: closestY + marginTop };\n    };\n\n    const isValidPoint = (x, y) => {\n\n        let out = false;\n        const gameMode = localStorage.getItem(\"gameMode\");\n\n        if (gameMode === \"normal\") {\n            out = true;\n        } else if (gameMode === \"shared\") {\n            switch (currentPlayer) {\n                case 1:\n                    out = (totalPlayers == 3) ? (x > marginLeft + width / 3) : (x > marginLeft + (7 * width) / 22);\n                    break;\n\n                case 2:\n                    out = (totalPlayers == 3) ? ((x < marginLeft + width / 3) || (x > marginLeft + 2 * width / 3)) : (x < marginLeft + width - (7 * width) / 22);\n                    break;\n\n                case 3:\n                    out = (totalPlayers == 3) ? (x < marginLeft + 2 * width / 3) : (y > marginTop + (7 * height) / 22);\n                    break;\n\n                case 4:\n                    out = y < height + marginTop - (7 * height) / 22;\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return out && ((x > marginLeft - 20) && (x < marginLeft + width + 20) && (y > marginTop - 20) && (y < marginTop + height + 20));\n    }\n\n    const [mousePos, setMousePos] = useState({ x: 0, y: 0 }); // �tat pour la position de la souris\n\n    // G�rer le mouvement de la souris \n    const handleMouseMove = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n        setScrolling(false);\n\n        if (isValidPoint(x, y)) {\n            setMousePos({ x: closestX, y: closestY });\n        }\n    };\n\n    // ************************************************************************************************************* //\n    // *********** ATO NO MIASA LE GAME **************************************************************************** //\n    // ************************************************************************************************************* //\n    const handleClick = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n\n        const newX = Math.round((x - marginLeft) / scale) + 1; // Calcul de la colonne la plus proche\n        const newY = Math.round((y - marginTop) / scale) + 1; // Calcul de la ligne la plus proche\n\n        if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n            //reset temps de reflexion\n            localStorage.setItem('reset', 'true');\n\n            // setCurrentPlayer(currentPlayer % totalPlayers + 1);\n            handlePlayerMove(plateau, newX, newY, currentPlayer, 0);\n\n        } else {\n            \n        }\n    };\n    const handlePlayerMove = async (plateau, newX, newY, currentPlayer, count) => {\n        // Ajouter le point au joueur courant\n        const updatedPlayerPoints = [...playerPoints];\n        updatedPlayerPoints[currentPlayer - 1].push({ x: newX - 1, y: newY - 1 });\n        setPlayerPoints(updatedPlayerPoints);\n        \n        plateau[newY][newX] = currentPlayer;\n\n        // Mettre  jour l'tat plateau avec la nouvelle matrice\n        setPlateau(plateau);\n\n        try {\n            // Appel de la fonction avec les donn�es � envoyer et attendre qu'elle se termine\n            let cP = await sendDataToServer(plateau, { x: newX, y: newY });\n\n            // console.log(\"cp\", cP);\n            // if (cP.currentPlayer === 2 && count < 1) {\n            //     console.log(\"tonga eto\");\n            //     const iaPoint = await iaTurn(plateau, { y: newX, x: newY });\n            //     console.log(iaPoint);\n            //     // console.log(currentPlayer, \"a\");\n            //     handlePlayerMove(plateau, iaPoint.y, iaPoint.x, cP.currentPlayer, count);\n            //     // console.log(currentPlayer, \"b\");\n            // }\n            \n        } catch (error) {\n            console.error(\"Erreur lors de la gestion du mouvement du joueur:\", error);\n        }\n    };\n\n    const iaTurn = async (plateau, dernierPoint) => {\n        try {\n            const response = await axios.put(\"http://localhost:7001/api/Game/IA\", {\n                CircuitList: playersCircuitsList,\n                plateau: plateau,\n                dernierPoint: dernierPoint,\n                currentPlayer: currentPlayer\n            });\n\n            // console.log( response.data);\n            return {x: response.data.currentPlayer, y: response.data.score};\n\n\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    const sendDataToServer = async (plateau, dernierPoint) => {\n        try {//https://localhost:44356\n            const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n                CircuitList: playersCircuitsList,\n                plateau: plateau,\n                dernierPoint: dernierPoint,\n                currentPlayer: currentPlayer\n            });\n\n            //console.log(response.data);\n            currentPlayer = response.data.currentPlayer;\n            await setCurrentPlayer(response.data.currentPlayer);\n            // console.log(currentPlayer, \"currentPlayer\", response.data.currentPlayer);\n            // localStorage.setItem(\"scorePlayer\" + currentPlayer, response.data.score);\n\n            const circuitData = response.data.circuitList.map(playerCircuits =>\n                playerCircuits.map(circuit => circuit.map(point => ({ x: point.x, y: point.y})))\n            );\n\n            setPlayersCircuitsList(circuitData);\n            const tempScore = response.data.score;\n            if (tempScore != 0) {\n                playersScore[currentPlayer - 1] += tempScore;\n                setPlayersScore(playersScore);\n                for (let i = 1; i <= localStorage.getItem(\"totalPlayers\"); i++) {\n                  localStorage.setItem(\"score\" + i, playersScore[i - 1]);\n                }\n                // localStorage.setItem(\"score\"+currentPlayer, playersScore[currentPlayer - 1]);\n                console.log(\"score\"+currentPlayer + \" \" +localStorage.getItem(\"score\"+currentPlayer))\n            }\n\n            const plateauData = response.data.plateau.map(row =>\n                row.map(cell => cell)\n            );\n\n            // Mettez � jour l'�tat avec la nouvelle structure de donn�es\n            setPlateau(plateauData);\n\n            return response.data;\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    return (\n        <Stage\n            width={marginLeft + width + marginRight}\n            height={marginTop + height + marginBottom}\n            onClick={handleClick}\n            onMouseMove={handleMouseMove}\n            onWheel={handleWheel}\n        >\n            <Layer>\n                {renderPlayerAreas()} \n                {renderHorizontalLines()}\n                {renderVerticalLines()}\n\n                {drawClosedCircuit()}\n\n                {/* Rendu des points par joueur */}\n                {playerPoints.map((points, playerIndex) =>\n                    points.map((point, index) => (\n                        <Circle\n                            key={`${playerIndex}-${index}`}\n                            x={point.x * scale + marginLeft}\n                            y={point.y * scale + marginTop}\n                            radius={radius}\n                            fill={joueurs[playerIndex].color}\n                        />\n                    ))\n                )}\n\n                {/* Cercle qui suit la souris */}\n                {!scrolling && isValidPoint(mousePos.x, mousePos.y) && (\n                    <Circle\n                        x={mousePos.x}\n                        y={mousePos.y}\n                        radius={radius * 2}\n                        fill={joueurs[currentPlayer - 1].color}\n                        opacity={0.5} // Opacit� de 50%\n                    />\n                )}\n\n            </Layer>\n        </Stage>\n    );\n};\n\n// Valeurs par d�faut pour les props\nPage.defaultProps = {\n    numRows: 22,\n    numCols: 10,\n    totalPlayers: 2\n};\n\nexport default Page;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}