{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SEDY\\\\Desktop\\\\GPL3\\\\point-game\\\\src\\\\Page.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page = ({\n  totalPlayers,\n  numRows,\n  numCols,\n  plateau,\n  setPlateau,\n  timeElapsed,\n  currentPlayer,\n  setCurrentPlayer\n}) => {\n  _s();\n  React.useEffect(() => {\n    if (timeElapsed <= 0) {\n      setCurrentPlayer(currentPlayer % totalPlayers + 1);\n      // localStorage.setItem(\"currentPlayer\", currentPlayer % totalPlayers + 1);\n      //console.log('turn', currentPlayer % totalPlayers + 1);\n    }\n  }, [timeElapsed, currentPlayer, totalPlayers]);\n  const [height, setHeight] = useState(450 / numRows < 30 ? 30 * numRows : 450);\n  const [scale, setScale] = useState(height / numRows);\n  const [width, setWidth] = useState(numCols * scale);\n  const [marginTop, setMarginTop] = useState(scale * 3);\n  const [marginBottom, setMarginBottom] = useState(scale * 2);\n  const [marginLeft, setMarginLeft] = useState(scale * 4);\n  const [marginRight, setMarginRight] = useState(scale * 4 / 5);\n  const [radius, setRadius] = useState(scale / 7);\n\n  //let s = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n  //setWidth(marginLeft + numCols * scale + marginRight);\n  const [echelle, setEchelle] = useState(1.1); // Nouvelle variable echelle � 1 par d�faut\n  const [scrolling, setScrolling] = useState(false); // �tat pour suivre si le d�filement est actif\n\n  // Gestionnaire d'�v�nements pour la molette\n  const handleWheel = event => {\n    event.evt.preventDefault(); // Utiliser l'�v�nement natif pour pr�venir le comportement par d�faut\n    const molette = event.evt.deltaY;\n    console.log(\"molette\", molette, \" \", molette < 0);\n    const newEchelle = molette < 0 ? 1.1 : 1 / 1.1;\n    setEchelle(newEchelle);\n    console.log(\"cell\", scale, \"radius\", radius, \"echelle\", echelle, \"newE\", newEchelle);\n    if ((scale > 30 || molette < 0) && (scale < 115 || molette > 0)) {\n      const newScale = Math.round(scale * echelle);\n      setScale(newScale);\n      // Ajuster les marges en fonction de l'�chelle\n      setMarginTop(prevMarginTop => Math.round(prevMarginTop * newEchelle));\n      setMarginBottom(prevMarginBottom => Math.round(prevMarginBottom * newEchelle));\n      setMarginLeft(prevMarginLeft => Math.round(prevMarginLeft * newEchelle));\n      setMarginRight(prevMarginRight => Math.round(prevMarginRight * newEchelle));\n      setRadius(prevRadius => prevRadius * newEchelle);\n      setWidth(numCols * newScale);\n      setHeight(numRows * newScale);\n    }\n    // Indiquer que le d�filement est actif\n    setScrolling(true);\n    console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n    console.log(\"width\", width, \" height\", height);\n  };\n  //scale = 50;\n\n  // Tableaux pour stocker les points de chaque joueur avec leur couleur\n  const [playerPoints, setPlayerPoints] = useState(Array.from({\n    length: totalPlayers\n  }, () => []));\n\n  // Initialisation des circuits pour chaque joueur\n  const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n  const drawClosedCircuit = () => {\n    let lines = [];\n    for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n      let circuits = playersCircuitsList[playerIndex];\n      let color = playerIndex === 0 ? \"red\" : playerIndex === 1 ? \"blue\" : playerIndex === 2 ? 'green' : 'black';\n      for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n        const circuit = circuits[circuitIndex];\n        const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n        lines.push( /*#__PURE__*/_jsxDEV(Line, {\n          points: points,\n          stroke: color,\n          strokeWidth: radius * 2 / 5,\n          closed: true // Fermer le circuit\n          ,\n          lineJoin: \"round\",\n          lineCap: \"round\"\n        }, `player-${playerIndex}-circuit-${circuitIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    return lines;\n  };\n  const renderHorizontalLines = () => {\n    const lines = [];\n\n    // Espacement entre les lignes principales\n    const spacing = scale;\n    const startY = marginTop;\n    const totalWidth = marginLeft + width + marginRight; // Largeur totale ajust�e\n\n    // Ajouter trois lignes interm�diaires au-dessus de la premi�re ligne principale\n    const initialIncrement = spacing / 4;\n    for (let k = 1; k <= 3; k++) {\n      const aboveFirstYPosition = startY - k * initialIncrement;\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, aboveFirstYPosition, totalWidth, aboveFirstYPosition],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n      }, `hline-above-first-${k}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this));\n    }\n    for (let i = 0; i <= numRows; i++) {\n      // Position de la ligne principale\n      const mainYPosition = startY + i * spacing;\n\n      // Ajouter la ligne principale\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 4 // Ajustement de l'�paisseur de la ligne\n      }, `hline-main-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this));\n\n      // Ajouter trois lignes interm�diaires entre la ligne actuelle et la suivante\n      if (i < numRows) {\n        const increment = spacing / 4; // Espacement des lignes interm�diaires\n\n        for (let j = 1; j <= 3; j++) {\n          const intermediateYPosition = mainYPosition + j * increment;\n          lines.push( /*#__PURE__*/_jsxDEV(Line, {\n            points: [0, intermediateYPosition, totalWidth, intermediateYPosition],\n            stroke: \"#4455C9DD\",\n            strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n          }, `hline-intermediate-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this));\n        }\n      }\n    }\n\n    // Ajouter deux lignes interm�diaires en dessous de la derni�re ligne principale\n    const belowLastYPosition = startY + numRows * spacing;\n    for (let m = 1; m <= 2; m++) {\n      const belowLastYIncrement = belowLastYPosition + m * initialIncrement;\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, belowLastYIncrement, totalWidth, belowLastYIncrement],\n        stroke: \"#4455C9DD\",\n        strokeWidth: radius / 8 // Ligne plus fine pour les lignes interm�diaires\n      }, `hline-below-last-${m}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  const renderVerticalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numCols; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom],\n        stroke: i === 0 ? \"#FF0000CC\" : \"#4455C9DD\",\n        strokeWidth: radius / 4\n      }, `vline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n\n  // Calculer l'intersection la plus proche\n  const getClosestIntersection = (x, y) => {\n    const closestX = Math.round((x - marginLeft) / scale) * scale;\n    const closestY = Math.round((y - marginTop) / scale) * scale;\n    return {\n      x: closestX + marginLeft,\n      y: closestY + marginTop\n    };\n  };\n  const isValidPoint = (x, y) => {\n    return x > marginLeft - 20 && x < marginLeft + width + 20 && y > marginTop - 20 && y < marginTop + height + 20;\n  };\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  }); // �tat pour la position de la souris\n\n  // G�rer le mouvement de la souris \n  const handleMouseMove = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    setScrolling(false);\n    if (isValidPoint(x, y)) {\n      setMousePos({\n        x: closestX,\n        y: closestY\n      });\n    }\n  };\n\n  // ************************************************************************************************************* //\n  // *********** ATO NO MIASA LE GAME **************************************************************************** //\n  // ************************************************************************************************************* //\n  const handleClick = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const newX = Math.round((x - marginLeft) / scale) + 1; // Calcul de la colonne la plus proche\n    const newY = Math.round((y - marginTop) / scale) + 1; // Calcul de la ligne la plus proche\n\n    //console.log(\"ix\", newX, \" iy\", newY);\n\n    if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n      //reset temps de reflexion\n      localStorage.setItem('reset', 'true');\n      //console.log(localStorage.getItem('reset'));\n\n      // Ajouter le point au joueur courant\n      const updatedPlayerPoints = [...playerPoints];\n      updatedPlayerPoints[currentPlayer - 1].push({\n        x: newX - 1,\n        y: newY - 1\n      });\n      setPlayerPoints(updatedPlayerPoints);\n\n      // Mettre � jour la case correspondante dans la matrice plateau\n      //const newPlateau = plateau.map((row, rowIndex) =>\n      //    row.map((value, colIndex) => (rowIndex === newY && colIndex === newX ? currentPlayer : value))\n      //);\n\n      plateau[newY][newX] = currentPlayer;\n\n      // Mettre � jour l'�tat plateau avec la nouvelle matrice\n      setPlateau(plateau);\n      //console.log(\"x\", newX, \" y\", newY);\n\n      setCurrentPlayer(currentPlayer % totalPlayers + 1);\n      // localStorage.setItem(\"currentPlayer\", currentPlayer);\n\n      // handlePlayerMove(plateau, newX, newY);\n    }\n  };\n  const handlePlayerMove = async (plateau, newX, newY, currentPlayer, totalPlayers) => {\n    try {\n      // Appel de la fonction avec les donn�es � envoyer et attendre qu'elle se termine\n      let cP = await sendDataToServer(plateau, {\n        x: newX,\n        y: newY\n      });\n\n      // Mettre � jour le joueur courant\n      // setCurrentPlayer(currentPlayer % totalPlayers + 1);\n\n      console.log(\"cp\", cP);\n      if (cP === 2) {\n        console.log(\"tonga eto\");\n        const iaPoint = await iaTurn(plateau, {\n          x: newX,\n          y: newY\n        });\n        console.log(iaPoint);\n        //await sendDataToServer(plateau, iaPoint);\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la gestion du mouvement du joueur:\", error);\n    }\n  };\n  const iaTurn = async (plateau, dernierPoint) => {\n    try {\n      const response = await axios.put(\"http://localhost:7001/api/Game/IA\", {\n        CircuitList: playersCircuitsList,\n        plateau: plateau,\n        dernierPoint: dernierPoint,\n        currentPlayer: currentPlayer\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  const sendDataToServer = async (plateau, dernierPoint) => {\n    try {\n      //https://localhost:44356\n      const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n        CircuitList: playersCircuitsList,\n        plateau: plateau,\n        dernierPoint: dernierPoint,\n        currentPlayer: currentPlayer\n      });\n\n      //console.log(response.data);\n      await setCurrentPlayer(response.data.currentPlayer);\n      // localStorage.setItem(\"currentPlayer\", response.data.currentPlayer);\n      // localStorage.setItem(\"scorePlayer\" + currentPlayer, response.data.score);\n\n      const circuitData = response.data.circuitList.map(playerCircuits => playerCircuits.map(circuit => circuit.map(point => ({\n        x: point.x,\n        y: point.y\n      }))));\n      setPlayersCircuitsList(circuitData);\n      const plateauData = response.data.plateau.map(row => row.map(cell => cell));\n\n      // Mettez � jour l'�tat avec la nouvelle structure de donn�es\n      setPlateau(plateauData);\n      return response.data.currentPlayer;\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: marginLeft + width + marginRight,\n    height: marginTop + height + marginBottom,\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onWheel: handleWheel,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [renderHorizontalLines(), renderVerticalLines(), drawClosedCircuit(), playerPoints.map((points, playerIndex) => points.map((point, index) => /*#__PURE__*/_jsxDEV(Circle, {\n        x: point.x * scale + marginLeft,\n        y: point.y * scale + marginTop,\n        radius: radius,\n        fill: playerIndex === 0 ? 'red' : playerIndex === 1 ? 'blue' : playerIndex === 2 ? 'green' : 'black' // Exemple de couleurs diff�rentes pour les joueurs\n      }, `${playerIndex}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 25\n      }, this))), !scrolling && isValidPoint(mousePos.x, mousePos.y) && /*#__PURE__*/_jsxDEV(Circle, {\n        x: mousePos.x,\n        y: mousePos.y,\n        radius: radius * 2,\n        fill: currentPlayer === 1 ? 'red' : currentPlayer === 2 ? 'blue' : currentPlayer === 3 ? 'green' : 'black',\n        opacity: 0.5 // Opacit� de 50%\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 9\n  }, this);\n};\n\n// Valeurs par d�faut pour les props\n_s(Page, \"rIFplvOOrrLn7OOsgKpBIls+gn0=\");\n_c = Page;\nPage.defaultProps = {\n  numRows: 22,\n  numCols: 10,\n  totalPlayers: 2\n};\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","useState","axios","Stage","Layer","Line","Circle","jsxDEV","_jsxDEV","Page","totalPlayers","numRows","numCols","plateau","setPlateau","timeElapsed","currentPlayer","setCurrentPlayer","_s","useEffect","height","setHeight","scale","setScale","width","setWidth","marginTop","setMarginTop","marginBottom","setMarginBottom","marginLeft","setMarginLeft","marginRight","setMarginRight","radius","setRadius","echelle","setEchelle","scrolling","setScrolling","handleWheel","event","evt","preventDefault","molette","deltaY","console","log","newEchelle","newScale","Math","round","prevMarginTop","prevMarginBottom","prevMarginLeft","prevMarginRight","prevRadius","playerPoints","setPlayerPoints","Array","from","length","playersCircuitsList","setPlayersCircuitsList","fill","map","drawClosedCircuit","lines","playerIndex","circuits","color","circuitIndex","circuit","points","flatMap","point","x","y","push","stroke","strokeWidth","closed","lineJoin","lineCap","fileName","_jsxFileName","lineNumber","columnNumber","renderHorizontalLines","spacing","startY","totalWidth","initialIncrement","k","aboveFirstYPosition","i","mainYPosition","increment","j","intermediateYPosition","belowLastYPosition","m","belowLastYIncrement","renderVerticalLines","getClosestIntersection","closestX","closestY","isValidPoint","mousePos","setMousePos","handleMouseMove","target","getStage","getPointerPosition","handleClick","newX","newY","localStorage","setItem","updatedPlayerPoints","handlePlayerMove","cP","sendDataToServer","iaPoint","iaTurn","error","dernierPoint","response","put","CircuitList","data","circuitData","circuitList","playerCircuits","plateauData","row","cell","onClick","onMouseMove","onWheel","children","index","opacity","_c","defaultProps","$RefreshReg$"],"sources":["C:/Users/SEDY/Desktop/GPL3/point-game/src/Page.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\n\nconst Page = ({ totalPlayers, numRows, numCols, plateau, setPlateau, timeElapsed, currentPlayer, setCurrentPlayer}) => {\n\n    React.useEffect(() => {\n        if (timeElapsed <= 0) {\n            setCurrentPlayer(currentPlayer % totalPlayers + 1);\n            // localStorage.setItem(\"currentPlayer\", currentPlayer % totalPlayers + 1);\n            //console.log('turn', currentPlayer % totalPlayers + 1);\n        }\n    }, [timeElapsed, currentPlayer, totalPlayers]);\n\n    const [height, setHeight] = useState(((450 / numRows) < 30) ? 30 * numRows : 450);\n    const [scale, setScale] = useState(height / numRows);\n    const [width, setWidth] = useState(numCols * scale);\n\n    const [marginTop, setMarginTop] = useState(scale * 3);\n    const [marginBottom, setMarginBottom] = useState(scale * 2);\n    const [marginLeft, setMarginLeft] = useState(scale * 4);\n    const [marginRight, setMarginRight] = useState(scale * 4 / 5);\n    const [radius, setRadius] = useState(scale / 7);\n\n    //let s = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n    //setWidth(marginLeft + numCols * scale + marginRight);\n    const [echelle, setEchelle] = useState(1.1); // Nouvelle variable echelle � 1 par d�faut\n    const [scrolling, setScrolling] = useState(false); // �tat pour suivre si le d�filement est actif\n\n    // Gestionnaire d'�v�nements pour la molette\n    const handleWheel = (event) => {\n        event.evt.preventDefault(); // Utiliser l'�v�nement natif pour pr�venir le comportement par d�faut\n        const molette = event.evt.deltaY;\n        console.log(\"molette\", molette, \" \", (molette < 0));\n\n        const newEchelle = (molette < 0) ? 1.1 : (1 / 1.1);\n        setEchelle(newEchelle);\n\n        console.log(\"cell\", scale, \"radius\", radius, \"echelle\", echelle, \"newE\", newEchelle);\n\n\n        if (((scale > 30) || molette < 0) && ((scale < 115) || molette > 0)) {\n            const newScale = Math.round(scale * echelle);\n            setScale(newScale);\n            // Ajuster les marges en fonction de l'�chelle\n            setMarginTop((prevMarginTop) => Math.round(prevMarginTop * newEchelle));\n            setMarginBottom((prevMarginBottom) => Math.round(prevMarginBottom * newEchelle));\n            setMarginLeft((prevMarginLeft) => Math.round(prevMarginLeft * newEchelle));\n            setMarginRight((prevMarginRight) => Math.round(prevMarginRight * newEchelle));\n            setRadius((prevRadius) => prevRadius * newEchelle);\n            setWidth(numCols * newScale);\n            setHeight(numRows * newScale);\n        }\n        // Indiquer que le d�filement est actif\n        setScrolling(true);\n\n        console.log(marginTop, \"-\", marginRight, \"-\", marginBottom, \"-\", marginLeft);\n        console.log(\"width\", width, \" height\", height);\n        \n    };\n    //scale = 50;\n\n\n    // Tableaux pour stocker les points de chaque joueur avec leur couleur\n    const [playerPoints, setPlayerPoints] = useState(Array.from({ length: totalPlayers }, () => []));\n\n\n    // Initialisation des circuits pour chaque joueur\n    const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n\n\n\n    const drawClosedCircuit = () => {\n        let lines = [];\n\n        for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n            let circuits = playersCircuitsList[playerIndex];\n            let color = playerIndex === 0 ? \"red\" : playerIndex === 1 ? \"blue\" : playerIndex === 2 ? 'green' : 'black'; \n\n            for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n                const circuit = circuits[circuitIndex];\n                const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n\n                lines.push(\n                    <Line\n                        key={`player-${playerIndex}-circuit-${circuitIndex}`}\n                        points={points}\n                        stroke={color}\n                        strokeWidth={radius * 2 / 5}\n                        closed={true} // Fermer le circuit\n                        lineJoin=\"round\"\n                        lineCap=\"round\"\n                    />\n                );\n            }\n        }\n        \n        return lines;\n    };\n\n    const renderHorizontalLines = () => {\n        const lines = [];\n\n        // Espacement entre les lignes principales\n        const spacing = scale;\n        const startY = marginTop;\n        const totalWidth = marginLeft + width + marginRight; // Largeur totale ajust�e\n\n        // Ajouter trois lignes interm�diaires au-dessus de la premi�re ligne principale\n        const initialIncrement = spacing / 4;\n        for (let k = 1; k <= 3; k++) {\n            const aboveFirstYPosition = startY - k * initialIncrement;\n\n            lines.push(\n                <Line\n                    key={`hline-above-first-${k}`}\n                    points={[0, aboveFirstYPosition, totalWidth, aboveFirstYPosition]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                />\n            );\n        }\n\n        for (let i = 0; i <= numRows; i++) {\n            // Position de la ligne principale\n            const mainYPosition = startY + i * spacing;\n\n            // Ajouter la ligne principale\n            lines.push(\n                <Line\n                    key={`hline-main-${i}`}\n                    points={[0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 4} // Ajustement de l'�paisseur de la ligne\n                />\n            );\n\n            // Ajouter trois lignes interm�diaires entre la ligne actuelle et la suivante\n            if (i < numRows) {\n                const increment = spacing / 4; // Espacement des lignes interm�diaires\n\n                for (let j = 1; j <= 3; j++) {\n                    const intermediateYPosition = mainYPosition + j * increment;\n\n                    lines.push(\n                        <Line\n                            key={`hline-intermediate-${i}-${j}`}\n                            points={[0, intermediateYPosition, totalWidth, intermediateYPosition]}\n                            stroke=\"#4455C9DD\"\n                            strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                        />\n                    );\n                }\n            }\n        }\n\n        // Ajouter deux lignes interm�diaires en dessous de la derni�re ligne principale\n        const belowLastYPosition = startY + numRows * spacing;\n        for (let m = 1; m <= 2; m++) {\n            const belowLastYIncrement = belowLastYPosition + m * initialIncrement;\n\n            lines.push(\n                <Line\n                    key={`hline-below-last-${m}`}\n                    points={[0, belowLastYIncrement, totalWidth, belowLastYIncrement]}\n                    stroke=\"#4455C9DD\"\n                    strokeWidth={radius / 8} // Ligne plus fine pour les lignes interm�diaires\n                />\n            );\n        }\n\n        return lines;\n    };\n\n\n\n    const renderVerticalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numCols; i++) {\n            lines.push(\n                <Line\n                    key={`vline${i}`}\n                    points={[marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom]}\n                    stroke={i === 0 ? \"#FF0000CC\" : \"#4455C9DD\"}\n                    strokeWidth={radius / 4}\n                />\n            );\n        }\n        return lines;\n    };\n\n    // Calculer l'intersection la plus proche\n    const getClosestIntersection = (x, y) => {\n        const closestX = Math.round((x - marginLeft) / scale) * scale;\n        const closestY = Math.round((y - marginTop) / scale) * scale;\n\n        return { x: closestX + marginLeft, y: closestY + marginTop };\n    };\n\n    const isValidPoint = (x, y) => {\n        return ((x > marginLeft - 20) && (x < marginLeft + width + 20) && (y > marginTop - 20) && (y < marginTop + height + 20));\n    }\n\n    const [mousePos, setMousePos] = useState({ x: 0, y: 0 }); // �tat pour la position de la souris\n\n    // G�rer le mouvement de la souris \n    const handleMouseMove = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n        setScrolling(false);\n\n        if (isValidPoint(x, y)) {\n            setMousePos({ x: closestX, y: closestY });\n        }\n    };\n\n    // ************************************************************************************************************* //\n    // *********** ATO NO MIASA LE GAME **************************************************************************** //\n    // ************************************************************************************************************* //\n    const handleClick = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n\n        const newX = Math.round((x - marginLeft) / scale) + 1; // Calcul de la colonne la plus proche\n        const newY = Math.round((y - marginTop) / scale) + 1; // Calcul de la ligne la plus proche\n\n        //console.log(\"ix\", newX, \" iy\", newY);\n\n        if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n            //reset temps de reflexion\n            localStorage.setItem('reset', 'true');\n            //console.log(localStorage.getItem('reset'));\n\n            // Ajouter le point au joueur courant\n            const updatedPlayerPoints = [...playerPoints];\n            updatedPlayerPoints[currentPlayer - 1].push({ x: newX - 1, y: newY - 1 });\n            setPlayerPoints(updatedPlayerPoints);\n\n\n            // Mettre � jour la case correspondante dans la matrice plateau\n            //const newPlateau = plateau.map((row, rowIndex) =>\n            //    row.map((value, colIndex) => (rowIndex === newY && colIndex === newX ? currentPlayer : value))\n            //);\n\n            plateau[newY][newX] = currentPlayer;\n\n\n            // Mettre � jour l'�tat plateau avec la nouvelle matrice\n            setPlateau(plateau);\n            //console.log(\"x\", newX, \" y\", newY);\n\n            setCurrentPlayer(currentPlayer % totalPlayers + 1);\n            // localStorage.setItem(\"currentPlayer\", currentPlayer);\n\n            // handlePlayerMove(plateau, newX, newY);\n\n        }\n    };\n    const handlePlayerMove = async (plateau, newX, newY, currentPlayer, totalPlayers) => {\n        try {\n            // Appel de la fonction avec les donn�es � envoyer et attendre qu'elle se termine\n            let cP = await sendDataToServer(plateau, { x: newX, y: newY });\n\n            // Mettre � jour le joueur courant\n            // setCurrentPlayer(currentPlayer % totalPlayers + 1);\n\n            console.log(\"cp\", cP);\n            if (cP === 2) {\n                console.log(\"tonga eto\");\n                const iaPoint = await iaTurn(plateau, { x: newX, y: newY });\n                console.log(iaPoint);\n                //await sendDataToServer(plateau, iaPoint);\n            }\n        } catch (error) {\n            console.error(\"Erreur lors de la gestion du mouvement du joueur:\", error);\n        }\n    };\n\n    const iaTurn = async (plateau, dernierPoint) => {\n        try {\n            const response = await axios.put(\"http://localhost:7001/api/Game/IA\", {\n                CircuitList: playersCircuitsList,\n                plateau: plateau,\n                dernierPoint: dernierPoint,\n                currentPlayer: currentPlayer\n            });\n\n            return response.data;\n\n\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    const sendDataToServer = async (plateau, dernierPoint) => {\n        try {//https://localhost:44356\n            const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n                CircuitList: playersCircuitsList,\n                plateau: plateau,\n                dernierPoint: dernierPoint,\n                currentPlayer: currentPlayer\n            });\n\n            //console.log(response.data);\n            await setCurrentPlayer(response.data.currentPlayer);\n            // localStorage.setItem(\"currentPlayer\", response.data.currentPlayer);\n            // localStorage.setItem(\"scorePlayer\" + currentPlayer, response.data.score);\n\n            const circuitData = response.data.circuitList.map(playerCircuits =>\n                playerCircuits.map(circuit => circuit.map(point => ({ x: point.x, y: point.y})))\n            );\n\n            setPlayersCircuitsList(circuitData);\n\n            const plateauData = response.data.plateau.map(row =>\n                row.map(cell => cell)\n            );\n\n            // Mettez � jour l'�tat avec la nouvelle structure de donn�es\n            setPlateau(plateauData);\n\n            return response.data.currentPlayer;\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    return (\n        <Stage\n            width={marginLeft + width + marginRight}\n            height={marginTop + height + marginBottom}\n            onClick={handleClick}\n            onMouseMove={handleMouseMove}\n            onWheel={handleWheel}\n        >\n            <Layer>\n                {renderHorizontalLines()}\n                {renderVerticalLines()}\n\n                {drawClosedCircuit()}\n\n                {/* Rendu des points par joueur */}\n                {playerPoints.map((points, playerIndex) =>\n                    points.map((point, index) => (\n                        <Circle\n                            key={`${playerIndex}-${index}`}\n                            x={point.x * scale + marginLeft}\n                            y={point.y * scale + marginTop}\n                            radius={radius}\n                            fill={playerIndex === 0 ? 'red' : playerIndex === 1 ? 'blue' : playerIndex === 2 ? 'green' : 'black'} // Exemple de couleurs diff�rentes pour les joueurs\n                        />\n                    ))\n                )}\n\n                {/* Cercle qui suit la souris */}\n                {!scrolling && isValidPoint(mousePos.x, mousePos.y) && (\n                    <Circle\n                        x={mousePos.x}\n                        y={mousePos.y}\n                        radius={radius * 2}\n                        fill={currentPlayer === 1 ? 'red' : currentPlayer === 2 ? 'blue' : currentPlayer === 3 ? 'green' : 'black'}\n                        opacity={0.5} // Opacit� de 50%\n                    />\n                )}\n\n            </Layer>\n        </Stage>\n    );\n};\n\n// Valeurs par d�faut pour les props\nPage.defaultProps = {\n    numRows: 22,\n    numCols: 10,\n    totalPlayers: 2\n};\n\nexport default Page;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}